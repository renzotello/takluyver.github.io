<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Codel</title><link>http://takluyver.github.io/</link><description>Thoughts about code</description><language>en</language><lastBuildDate>Fri, 04 Jul 2014 12:07:04 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>So you want to write a desktop app in Python</title><link>http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html</link><dc:creator>Thomas Kluyver</dc:creator><description>&lt;p&gt;This is an overview of the best tools and the best resources for building
desktop applications in Python.&lt;/p&gt;
&lt;p&gt;First things first. You can build great desktop applications in Python, and some
are widely used (like Dropbox). But you'll have to find your own way much more
than you would using Microsoft's or Apple's SDKs. The upside is that, with a bit
of legwork to package it appropriately, it's quite feasible to write a Python
application that works on all the major platforms.&lt;/p&gt;
&lt;div class="section" id="gui-toolkits"&gt;
&lt;h2&gt;GUI toolkits&lt;/h2&gt;
&lt;p&gt;The first thing you'll need to choose is a GUI toolkit.&lt;/p&gt;
&lt;img alt="Qt logo" class="align-right" src="http://takluyver.github.io/images/QtLogo.png"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For traditional desktop UIs, &lt;strong&gt;Qt&lt;/strong&gt; is a clear winner. It's powerful, looks
native on all the major platforms, and has probably the biggest community.
There are two different Python bindings: &lt;a class="reference external" href="http://www.riverbankcomputing.com/software/pyqt/intro"&gt;PyQt&lt;/a&gt;
is older and more mature, but it's only free if your application is open source
(&lt;a class="reference external" href="http://www.riverbankcomputing.com/software/pyqt/license"&gt;licensing&lt;/a&gt;), while
&lt;a class="reference external" href="http://qt-project.org/wiki/PySide"&gt;PySide&lt;/a&gt; is newer and more permissively
licensed (LGPL). I refer to the &lt;a class="reference external" href="http://qt-project.org/doc/"&gt;main Qt docs&lt;/a&gt;
a lot - the C++ examples mostly translate to Python quite well - but both &lt;a class="reference external" href="http://pyqt.sourceforge.net/Docs/PyQt4/index.html"&gt;PyQt's&lt;/a&gt; and &lt;a class="reference external" href="http://qt-project.org/wiki/PySideDocumentation"&gt;PySide's docs&lt;/a&gt; contain some useful information.
&lt;a class="reference external" href="http://qt-project.org/doc/qt-4.8/designer-manual.html"&gt;Qt Designer&lt;/a&gt; is
a drag and drop interface to design your UI; you can compile its .ui files
to Python modules with the pyuic command line tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="figure"&gt;
&lt;img alt="/images/Qt_Designer.png" src="http://takluyver.github.io/images/Qt_Designer.png"&gt;
&lt;p class="caption"&gt;Qt Designer in action&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Kivy logo" class="align-right" src="http://takluyver.github.io/images/kivy-logo.png" style="height: 64px;"&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For attractive, tablet-style interfaces, &lt;strong&gt;Kivy&lt;/strong&gt; is the
right choice. It's a fairly young but promising system. If you want to bring
your application to tablets and smartphones, then Kivy is the only option
that I'm aware of. &lt;a class="reference external" href="http://kivy.org/"&gt;More info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;When you want a basic GUI and don't care about aesthetics, &lt;strong&gt;Tkinter&lt;/strong&gt; is a
simple option. It's installed as part of Python. Python's own &lt;a class="reference external" href="https://docs.python.org/3/library/tkinter.html"&gt;tkinter documentation&lt;/a&gt; is rather minimal, but it
links to a bunch of other resources. &lt;a class="reference external" href="http://effbot.org/tkinterbook/"&gt;This site&lt;/a&gt;
is my favourite - it hasn't been updated in years, but then neither has Tkinter
(except that in Python 3, you &lt;tt class="docutils literal"&gt;import tkinter&lt;/tt&gt; rather than &lt;tt class="docutils literal"&gt;import Tkinter&lt;/tt&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pygame.org/"&gt;pygame&lt;/a&gt; is popular for building simple 2D games. There
are also frameworks for 3D graphics (&lt;a class="reference external" href="http://www.pyglet.org/"&gt;pyglet&lt;/a&gt;,
&lt;a class="reference external" href="https://www.panda3d.org/"&gt;Panda3d&lt;/a&gt;), but I don't know much about them.&lt;/li&gt;
&lt;li&gt;An increasingly popular option is to write your application as a local web
server, and build the UI in HTML and Javascript. This lets you use Python's
large ecosystem of web frameworks and libraries, but it's harder to integrate
with desktop conventions for things like opening files and window management.
&lt;a class="reference external" href="https://code.google.com/p/cefpython/"&gt;CEF Python&lt;/a&gt; lets you make a window
for your application, based on Google Chrome, but I haven't tried that.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A couple of alternatives I wouldn't recommend unless you have a reason to prefer
them: &lt;strong&gt;GTK&lt;/strong&gt; is popular on Linux, but it
looks ugly on other platforms. The older &lt;a class="reference external" href="http://www.pygtk.org/"&gt;pygtk&lt;/a&gt;
bindings have excellent documentation; the newer &lt;a class="reference external" href="https://wiki.gnome.org/Projects/PyGObject"&gt;PyGObject&lt;/a&gt;
system, which supports recent versions of GTK and Python, doesn't (though it's
getting better). &lt;strong&gt;wx&lt;/strong&gt; seems to have a good community, but development is slow,
and new projects that could have used it now mostly seem to pick Qt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="packaging-and-distribution"&gt;
&lt;h2&gt;Packaging and Distribution&lt;/h2&gt;
&lt;p&gt;This is probably the roughest part of making an application in Python. You can
easily distribute tools for developers as Python packages to be installed using
pip, but end users don't generally have Python and pip already set up. Python
packages also can't depend on something like Qt. There are a number of ways to
package your application and its dependencies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pynsist.readthedocs.org/"&gt;Pynsist&lt;/a&gt;, my own project, makes
a Windows installer which installs a version of Python that you specify, and
then installs your application. Unlike the other tools listed here, it doesn't
try to 'freeze' your application into an exe, but makes shortcuts which launch
.py files. This avoids certain kinds of bugs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cx-freeze.sourceforge.net/"&gt;cx_Freeze&lt;/a&gt; is a freeze tool:
it makes an executable out of your application. It works on Windows, Mac and
Linux, but only produces the executable for the platform you run it on (you
can't make a Windows exe on Linux, for example).
It can make simple packages (.msi for Windows, .dmg for Mac, .rpm for Linux),
or you can feed its output into &lt;a class="reference external" href="http://nsis.sourceforge.net/"&gt;NSIS&lt;/a&gt; or
&lt;a class="reference external" href="http://www.jrsoftware.org/isinfo.php"&gt;Inno Setup&lt;/a&gt; to have more control over
building a Windows installer.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pyinstaller.org/"&gt;PyInstaller&lt;/a&gt; is similar to cx_Freeze.
It doesn't yet support Python 3, but it does have the ability to produce a
'single file' executable.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pythonhosted.org/py2app/"&gt;py2app&lt;/a&gt; is a freeze tool specifically
for building Mac .app bundles.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.py2exe.org/"&gt;py2exe&lt;/a&gt; is a Windows-only freeze tool.
Development stopped for a long time, but at the time of writing there is some
recent activity on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="linux-packaging"&gt;
&lt;h3&gt;Linux packaging&lt;/h3&gt;
&lt;p&gt;Although some of the freeze tools can build Linux binaries, the preferred way to
distribute software is to make a package containing just your application, which
has &lt;em&gt;dependencies&lt;/em&gt; on Python and the libraries your application uses. So your
package doesn't contain everything it needs, but it tells the package manager
what other pieces it needs installed.&lt;/p&gt;
&lt;p&gt;Unfortunately, the procedures for preparing these are pretty complex, and Linux
distributions still don't have a common package format. The main ones are deb
packages, used by Debian, Ubuntu and Mint, and rpm packages, used by Fedora and
Red Hat. I don't know of a good, simple guide to packaging Python applications
for either - if you find one or write one, let me know.&lt;/p&gt;
&lt;p&gt;You can get users to download and install your package, but if you want it to
receive updates through the package manager, you'll need to host it in a
repository. Submitting your package to the distribution's main repositories makes
it easiest for users to install, but it has to meet the distro's quality
standards, and you generally can't push new feature releases to people except when
they upgrade the whole distribution. Some distributions offer hosting for
personal repos: Ubuntu's PPAs, or Fedora's Fedorapeople repositories. You can
also set up a repository on your own server.&lt;/p&gt;
&lt;p&gt;If you don't want to think about all that, just make a tarball of your application,
and explain to Linux users next to the download what it requires.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="miscellaneous"&gt;
&lt;h2&gt;Miscellaneous&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Threading&lt;/strong&gt;: If your application does anything taking longer than about a tenth
of a second, you should do it in a background thread, so your UI doesn't freeze
up. Be sure to only interact with GUI elements from the main thread, or you
can get segfaults. Python's GIL isn't a big issue here: the UI thread shouldn't
need much Python processing time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updates&lt;/strong&gt;: &lt;a class="reference external" href="https://pypi.python.org/pypi/esky"&gt;Esky&lt;/a&gt; is a framework for
updating frozen Python applications. I haven't tried it, but it looks interesting.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;</description><guid>http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html</guid><pubDate>Mon, 16 Jun 2014 23:55:03 GMT</pubDate></item><item><title>ASTsearch - code searching that knows about code</title><link>http://takluyver.github.io/posts/astsearch-code-searching-that-knows-about-code.html</link><dc:creator>Thomas Kluyver</dc:creator><description>&lt;p&gt;This weekend's hack is a tool for searching Python code.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/takluyver/astsearch"&gt;ASTsearch source code on Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What's wrong with grep, you might ask? Let's try to find every division in
IPython's codebase:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ grep --include "*.py" -rF "/" .
config/loader.py:        after applying any insert / extend / update changes
config/configurable.py:                    # ConfigValue is a wrapper for using append / update on containers
config/tests/test_loader.py:        argv = ['--a=~/1/2/3', '--b=~', '--c=~/', '--d="~/"']
config/tests/test_loader.py:        self.assertEqual(config.a, os.path.expanduser('~/1/2/3'))
config/tests/test_loader.py:        self.assertEqual(config.c, os.path.expanduser('~/'))
config/tests/test_loader.py:        self.assertEqual(config.d, '~/')
...
&lt;/pre&gt;
&lt;p&gt;In all, it finds 1685 lines, and very few of them are actual division. You could
write a regex that tries to ignore comments and strings, but &lt;a class="reference external" href="http://regex.info/blog/2006-09-15/247"&gt;now you have two
problems&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's do the same with ASTsearch:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ astsearch "?/?"
core/oinspect.py
 646|        shalf = int((string_max -5)/2)

core/ultratb.py
1254|        return h / i

core/page.py
 347|        whalf = int((width -5)/2)
...
&lt;/pre&gt;
&lt;p&gt;The output is 89 lines, and when spacing and filenames are removed, there are
46 results, all of which represent division operations.&lt;/p&gt;
&lt;p&gt;In this case, grep produced a lot of false positives. In other cases, it will
have false negatives—results that you wanted but didn't find. &lt;tt class="docutils literal"&gt;a=1&lt;/tt&gt; won't
match &lt;tt class="docutils literal"&gt;a= 1&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;"this"&lt;/tt&gt; won't match &lt;tt class="docutils literal"&gt;'this'&lt;/tt&gt;. For simple cases, regexes
can help (&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;a\s*=\s*1&lt;/span&gt;&lt;/tt&gt;), but they soon get unwieldy. ASTsearch is insensitive
to how you format your code: even statements split over several lines are easy
to find.&lt;/p&gt;
&lt;div class="section" id="how-does-it-work"&gt;
&lt;h2&gt;How does it work?&lt;/h2&gt;
&lt;p&gt;The string pattern—&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?/?&lt;/span&gt;&lt;/tt&gt; in the example above—is turned into an AST pattern.
ASTs, or Abstract Syntax Trees, are a structured representation of a formal
language such as Python source code.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;?&lt;/tt&gt; is a wildcard, so &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?/?&lt;/span&gt;&lt;/tt&gt; means "anything divided by anything". I picked
&lt;tt class="docutils literal"&gt;?&lt;/tt&gt; for this because it's not used in Python syntax, so it doesn't stop you
writing more specific search patterns.&lt;/p&gt;
&lt;p&gt;Some more patterns:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;a = ?&lt;/tt&gt; - Something is assigned to &lt;tt class="docutils literal"&gt;a&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;class &lt;span class="pre"&gt;?(TemplateExporter):&lt;/span&gt; ?&lt;/tt&gt; - A subclass of TemplateExporter&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;for ? in &lt;span class="pre"&gt;?:&lt;/span&gt; ? \nelse: ?&lt;/tt&gt; - A for loop with an &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; clause&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then it walks the directory, parsing each file with a &lt;tt class="docutils literal"&gt;.py&lt;/tt&gt; extension using
Python's built in parser. The standard library &lt;a class="reference external" href="https://docs.python.org/3/library/ast.html"&gt;ast module&lt;/a&gt; contains the tools to parse the
code and walk the AST, and &lt;a class="reference external" href="https://pypi.python.org/pypi/astcheck"&gt;astcheck&lt;/a&gt;,
another tool I wrote, can compare AST nodes against a template.&lt;/p&gt;
&lt;p&gt;Besides the command line interface, you can also use ASTsearch as a Python
module (&lt;tt class="docutils literal"&gt;import astsearch&lt;/tt&gt;). It's possible to define complex search patterns
in Python code that can't be written at the command line. &lt;a class="reference external" href="http://astsearch.readthedocs.org/en/latest/api.html"&gt;See the docs&lt;/a&gt; for some more details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-the-catch"&gt;
&lt;h2&gt;What's the catch?&lt;/h2&gt;
&lt;p&gt;ASTsearch only works on Python files, and Python files that are entirely valid
syntax (that's Python 3 syntax for now). If just the last line can't be parsed,
it won't find any matches in that file.&lt;/p&gt;
&lt;p&gt;It's slower than grep, because what it's doing is much more complex, and grep is
&lt;a class="reference external" href="http://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html"&gt;highly optimised&lt;/a&gt;.
But Python's parser is doing most of the hard work, and that's written in C. On
my laptop, scanning the IPython codebase (about 100k lines of code) takes about
3.5 seconds—definitely not instant, but far faster than I can think about even a
couple of results.&lt;/p&gt;
&lt;p&gt;There are search patterns you can't express at the command line. For instance,
you can't match function calls with a specific number of arguments (but you can
find function &lt;em&gt;definitions&lt;/em&gt; with a given number of arguments: &lt;tt class="docutils literal"&gt;def &lt;span class="pre"&gt;?(?,&lt;/span&gt; &lt;span class="pre"&gt;?):&lt;/span&gt; ?&lt;/tt&gt;).
I might extend the pattern mini-language once I've got a feel for what would be
useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-i-install-it"&gt;
&lt;h2&gt;How do I install it?&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
pip install astsearch
&lt;/pre&gt;
&lt;/div&gt;</description><guid>http://takluyver.github.io/posts/astsearch-code-searching-that-knows-about-code.html</guid><pubDate>Sun, 27 Apr 2014 17:39:44 GMT</pubDate></item><item><title>Readable Python coroutines</title><link>http://takluyver.github.io/posts/readable-python-coroutines.html</link><dc:creator>Thomas Kluyver</dc:creator><description>&lt;p&gt;Quick exercise: write a piece of code that, each time you pass it a word (a
string), tells you if you've passed it that word before. If you're reading a
post with a title like this, it shouldn't take you more than a few minutes. For
bonus points, have an option to ignore case, so it counts 'parrot' and 'Parrot'
as the same word.&lt;/p&gt;
&lt;p&gt;What did you go for? A function with a global variable (yuck!)? A class with a
method? A closure?&lt;/p&gt;
&lt;p&gt;How about a coroutine? Here's what that would look like:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;have_seen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And here's how you would use it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; hs = have_seen()
&amp;gt;&amp;gt;&amp;gt; next(hs)  # prime it
&amp;gt;&amp;gt;&amp;gt; hs.send('Hello')
False
&amp;gt;&amp;gt;&amp;gt; hs.send('World')
False
&amp;gt;&amp;gt;&amp;gt; hs.send('hello')
True
&lt;/pre&gt;
&lt;p&gt;Coroutines in Python are based on the generator machinery - see the &lt;tt class="docutils literal"&gt;yield&lt;/tt&gt;
keyword in there? &lt;a class="reference external" href="http://www.python.org/dev/peps/pep-0342/"&gt;PEP 342&lt;/a&gt;,
"Coroutines via Enhanced Generators", added the necessary features to Python
2.5, but it's not a very well known part of the language. And it's not hard to
see why - the code above isn't as clear as it should be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Emitting and receiving a value happen in the same yield expression. So rather
than yielding the response at the bottom of the loop, we have to store it in a
variable and jump back to the top of the loop.&lt;/li&gt;
&lt;li&gt;The coroutine has to emit a value before it can receive one, even though
there's nothing it really wants to emit. That's why we set &lt;tt class="docutils literal"&gt;res = None&lt;/tt&gt;
before the loop, and why the caller has to prime it by calling &lt;tt class="docutils literal"&gt;next(hs)&lt;/tt&gt;
before using it. It's easy to write a decorator that calls &lt;tt class="docutils literal"&gt;next&lt;/tt&gt; for you,
but that doesn't make the code inside the coroutine any clearer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the standard Python syntax is rather awkward. But we can make it clearer by
using a bit of wrapper code.
The trick is separating sending a value from receiving one:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;coromagic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;

&lt;span class="nd"&gt;@coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;have_seen2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We no longer need the &lt;cite&gt;res&lt;/cite&gt; variable. Instead, we alternate between two uses of
yield: a receiving yield, where we send the wrapper a token to indicate that
we're ready for a new value, and a sending yield, where we don't expect to get a
value back. The caller can use this in exactly the same way as the original
coroutine, except that the wrapper primes it automatically, so there's no need
to call &lt;tt class="docutils literal"&gt;next(hs)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The wrapper expects a receiving yield first, and at most one sending yield after
each receiving yield. If a receiving yield is followed by another receiving
yield, without a sending yield inbetween, &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; is returned to the caller,
just like a function without a return statement.&lt;/p&gt;
&lt;div class="section" id="handling-exceptions"&gt;
&lt;h2&gt;Handling exceptions&lt;/h2&gt;
&lt;p&gt;If either of our coroutines above raises an exception, we can't keep using that
coroutine:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; hs.send(12)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
  File "coro_ideas.py", line 8, in have_seen
    word = word.lower()
AttributeError: 'int' object has no attribute 'lower'
&amp;gt;&amp;gt;&amp;gt; hs.send('hi')
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
StopIteration
&lt;/pre&gt;
&lt;p&gt;I've got a solution of sorts for that, although it still feels a bit awkward.
The coroutine can request a context manager to catch exceptions:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;coromagic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_exception_context&lt;/span&gt;

&lt;span class="nd"&gt;@coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;have_seen3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;exception_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;get_exception_context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;seen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;exception_context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;case_sensitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;seen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The context manager co-ordinates with the wrapper to suppress the exception inside the coroutine, but raise it to the caller:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; hs3 = have_seen3()
&amp;gt;&amp;gt;&amp;gt; hs3.send(12)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
  File "./coromagic.py", line 28, in send
    raise self.last_exc
  File "./coro_ideas.py", line 47, in have_seen3
    word = word.lower()
AttributeError: 'int' object has no attribute 'lower'
&amp;gt;&amp;gt;&amp;gt; hs3.send('hi')
False
&lt;/pre&gt;
&lt;p&gt;Now the error doesn't stop us processing valid input afterwards.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-cares-about-coroutines"&gt;
&lt;h2&gt;Who cares about coroutines?&lt;/h2&gt;
&lt;p&gt;I find them interesting on their own. But this isn't just academic -
there are cases where coroutines can be the clearest way to write something.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;have_seen&lt;/tt&gt; example could easily be written with a class or a closure.
Coroutines come into their own for making state machines. With a class or a
closure, the state has to be stored in a variable, and you need a lookup table
to decide how to behave in each state. A coroutine can store the state as the
point where its code is executing.&lt;/p&gt;
&lt;p&gt;It's hard to come up with an example of this that's both realistic and
short, but here's my attempt. We're writing a plugin for a chat
application, which lets any chatter say "password foo", silencing everyone until
someone guesses "foo". The application just passes us each message, and expects
a True/False response saying whether it should be broadcast.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nd"&gt;@coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;password_game&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;# Normal chatting&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"password "&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;  &lt;span class="c"&gt;# Broadcast&lt;/span&gt;

        &lt;span class="c"&gt;# Waiting for someone to guess the password&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="c"&gt;# Don't send messages&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;   &lt;span class="c"&gt;# Show everyone the password once it has been guessed&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;In IPython, we have some coroutines for input processing. For instance, the
transformer to strip prompts from pasted code processes the first two lines in a
prompt-detection state. Then it moves into a prompt-stripping state if it
detected a prompt, or a no-op state if it didn't.&lt;/p&gt;
&lt;p&gt;The pattern of sending and receiving is also reminiscent of writing a thread
with input and output queues, and waiting for values on those queues. But
threads are messy: you have to deal with synchronisation and shut them
down safely. Calling a cororoutine is as deterministic as calling a function:
it runs, returns a value, and the calling code carries on. Of course, that means
that coroutines themselves don't run in parallel. But you can use them to build
clever things like &lt;a class="reference external" href="http://code.google.com/p/tulip/"&gt;tulip&lt;/a&gt;, which will become
the &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; module in Python 3.4. Tulip can suspend one coroutine and run
others while it waits for data, and then resume it when the data it needs is
ready.&lt;/p&gt;
&lt;p&gt;The best resource on coroutines in Python is &lt;a class="reference external" href="http://dabeaz.com/coroutines/"&gt;this excellent course&lt;/a&gt; by David Beazley.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coromagic-source-code"&gt;
&lt;h2&gt;Coromagic source code&lt;/h2&gt;
&lt;p&gt;This is the module used in the examples above.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://takluyver.github.io/listings/coromagic.py.html"&gt;coromagic.py&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;wraps&lt;/span&gt;

&lt;span class="c"&gt;# Tokens&lt;/span&gt;
&lt;span class="n"&gt;receive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;get_exception_context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CoroutineWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;last_exc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;generator&lt;/span&gt;

        &lt;span class="n"&gt;ready&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ready&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;get_exception_context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ready&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ExceptionContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;ready&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_exc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

        &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_exc&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_exc&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genfunc&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""Decorator for a generator function to wrap it as a coroutine."""&lt;/span&gt;
    &lt;span class="nd"&gt;@wraps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genfunc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;CoroutineWrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;genfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExceptionContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;corowrapper&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corowrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corowrapper&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ne"&gt;GeneratorExit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

        &lt;span class="c"&gt;# Pass other exceptions to the wrapper, and silence them for now&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corowrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_exc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;</description><guid>http://takluyver.github.io/posts/readable-python-coroutines.html</guid><pubDate>Sun, 10 Nov 2013 14:28:51 GMT</pubDate></item></channel></rss>